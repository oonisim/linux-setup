---
# file: tasks/main.yml
# Top-level installer for Nginx.
#
# @see http://wiki.nginx.org/Install
#

#

- debug:
    msg: "{{ ansible_distribution }}_{{ ansible_distribution_major_version}}.yml"

- pause:
    seconds: 5
- name: Include distribution specific variables
  include_vars: "{{ ansible_distribution }}_{{ ansible_distribution_major_version}}.yml"



- name: set role variables, if necessary
  include: set-role-variables.yml


- name: install libselinux-python binary for Ansible to work
  yum: name=libselinux-python state=present
  when: ansible_pkg_mgr == "yum"

- name: delegate to SELINUX handling subtask, if necessary
  include: set-selinux.yml
  when: nginx_in_selinux is defined and nginx_in_selinux == true



- name: delegate to APT system for installation
  include: use-apt.yml
  when: ansible_pkg_mgr == "apt"

- name: delegate to YUM system for installation
  include: use-yum.yml
  when: ansible_pkg_mgr == "yum"

- name: delegate to APK system for installation
  include: use-apk.yml
  when: ansible_pkg_mgr == "apk"



- name: rename default/example conf files in {{ nginx_conf_dir }}/conf.d/, if any
  command: ls "{{ nginx_conf_dir }}/conf.d/{{ item }}" && mv -f  "{{ nginx_conf_dir }}/conf.d/{{ item }}"  "{{ nginx_conf_dir }}/conf.d/{{ item }}.bak"
  with_items:
    - default.conf
    - example_ssl.conf
  ignore_errors: true


- name: copy Nginx main config file from role's default, if necessary
  template:
    src:  ../templates/nginx.conf.j2
    dest: "{{ nginx_conf_dir }}/nginx.conf"
    validate: "sudo nginx -t -c %s"
#  when: nginx_conf_main is not defined
  notify:
    - reload nginx

#- name: copy Nginx main config file from playbook's, if any
#  template:
#    src:  "{{ role_path }}/{{ nginx_conf_main }}"
#    dest: "{{ nginx_conf_dir }}/nginx.conf"
#    #validate: "nginx -t -c %s"
#  when: nginx_conf_main is defined
#  notify:
#    - reload nginx

- name: copy other Nginx config files from playbook's, if any
  template:
#    src:  "{{ playbook_dir }}/{{ item.value.src }}"
    src:  "{{ role_path }}/{{ item.value.src }}"    
    dest: "{{ nginx_conf_dir }}/conf.d/{{ item.value.dest }}"
    #validate: "nginx -t -c %s"
  with_dict: '{{ nginx_conf_others | default({}) }}'
  notify:
    - reload nginx

- name: install http://HOST:PORT/nginx_status endpoint, if requested
  copy:
    src:  ../files/nginx_status.conf
    dest: "{{ nginx_conf_dir }}/conf.d/nginx_status.conf"
    #validate: "nginx -t -c %s"
  when: nginx_status|bool
  notify:
    - reload nginx
